MODULE Biblioteca
	VAR 
		estado : {livre, tem_leitores, tem_escritor};
	ASSIGN
		init(estado) := livre;

MODULE Escritor(Biblioteca)
	VAR
		estado : {escrevendo, ocioso};
	ASSIGN
		init(estado) := ocioso;
		next(estado):=
			case
			(Biblioteca.estado = livre) : escrevendo;
			(estado=escrevendo) : ocioso;
			TRUE: estado;
		esac;
		next(Biblioteca.estado) :=
			case
			(next(estado) = escrevendo): tem_escritor;
			(estado = escrevendo & next(estado) = ocioso): livre;
			TRUE: Biblioteca.estado;
		esac;
	FAIRNESS
		running

MODULE Leitor(Biblioteca)
	VAR
		estado : {lendo, ocioso};
	ASSIGN
		init(estado) := ocioso;
		next(estado):=
			case
			(Biblioteca.estado = livre | Biblioteca.estado = tem_leitores): lendo;
			(estado=lendo) : ocioso;
			TRUE: estado;
		esac;
		next(Biblioteca.estado) :=
			case
			(next(estado) = lendo): tem_leitores;
			TRUE: Biblioteca.estado;
		esac;
	FAIRNESS
		running

MODULE main
	VAR
		biblioteca : Biblioteca;
		escritor : process Escritor(biblioteca);
		leitor : process Leitor(biblioteca);
		leitor2 : process Leitor(biblioteca);
		--leitor3 : process Leitor(biblioteca);
		--leitor4 : process Leitor(biblioteca);
		--leitor5 : process Leitor(biblioteca);
		--leitor6 : process Leitor(biblioteca);
	ASSIGN
		next(biblioteca.estado):=
				case
				(escritor.estado = ocioso & leitor.estado = ocioso & leitor2.estado = ocioso): livre;
				TRUE: biblioteca.estado;
		esac;
	

SPEC
	!EF( (escritor.estado = escrevendo & leitor.estado = lendo) | (escritor.estado = escrevendo & leitor2.estado = lendo) ) -- A e B
SPEC
	!AG( (escritor.estado=escrevendo & leitor.estado=lendo) | (escritor.estado=escrevendo & leitor2.estado=lendo)  )
SPEC
	!EF(escritor.estado = escrevendo & leitor.estado = lendo & leitor2.estado = lendo) -- E
SPEC
	!AG(escritor.estado=escrevendo & leitor.estado=lendo & leitor2.estado=lendo )
SPEC
	EF(leitor.estado = lendo & leitor2.estado = lendo & escritor.estado = ocioso) -- C
SPEC
	EF(escritor.estado = ocioso & leitor.estado = ocioso & leitor2.estado = ocioso) -- D
SPEC
	EF(escritor.estado = escrevendo & leitor.estado = ocioso & leitor2.estado = ocioso) -- F
SPEC
	EF(escritor.estado = ocioso & leitor.estado = lendo & leitor2.estado = ocioso) -- G
SPEC
	EF(escritor.estado = ocioso & leitor.estado = ocioso & leitor2.estado = lendo) -- H
