MODULE Escritor(biblioteca)
	VAR
		estado : {parado, escrevendo};
	ASSIGN
		init(estado) := parado;
		next(estado):=
			case
			(biblioteca = livre) : escrevendo;
			(estado = escrevendo) : parado;
			1: estado;
		esac;
		next(biblioteca) :=
			case
			(next(estado) = escrevendo): tem_escritor;
			(biblioteca=tem_escritor & estado = escrevendo & next(estado) = parado): livre;
			1: biblioteca;
		esac;
	FAIRNESS
		running

MODULE Leitor(biblioteca, l1)
	VAR
		estado : {parado, lendo};
	ASSIGN
		init(estado) := parado;
		next(estado):=
			case
			(biblioteca = livre) : lendo;
			(estado = parado & biblioteca = tem_leitor) : lendo;
			(estado = lendo) : parado;
			1: estado;
		esac;
		next(biblioteca) :=
			case
			(next(estado) = lendo): tem_leitor;
			(biblioteca = tem_leitor & estado = lendo & next(estado) = parado & next(l1.estado)=parado ): livre;
			1: biblioteca;
		esac;
	FAIRNESS
		running

MODULE main
	VAR
		biblioteca : {livre, tem_escritor, tem_leitor};
		escritor : process Escritor(biblioteca);
		escritor2 : process Escritor(biblioteca);
		leitor : process Leitor(biblioteca, leitor2);
		leitor2 : process Leitor(biblioteca, leitor);
	ASSIGN
		init(biblioteca) := livre;



SPEC
	EF(leitor.estado=parado & leitor2.estado=parado & escritor.estado=parado & escritor2.estado=parado & next(biblioteca)=livre) --false



































