MODULE Escritor(biblioteca)
	VAR
		estado : {escrevendo, ocioso};
	ASSIGN
		init(estado) := ocioso;
		next(estado):=
			case
			(biblioteca = livre) : escrevendo;
			(biblioteca = tem_leitores | biblioteca = tem_escritor ) : ocioso;
			1: estado;
		esac;
		next(biblioteca) :=
			case
			(next(estado) = escrevendo): tem_escritor;
			1: biblioteca;
		esac;
	FAIRNESS
		running

MODULE Leitor(biblioteca)
	VAR
		estado : {lendo, ocioso};
	ASSIGN
		init(estado) := ocioso;
		next(estado):=
			case
			(biblioteca = livre | ( estado=ocioso &  biblioteca = tem_leitores) ): lendo;
			(biblioteca = tem_escritor | ( estado=lendo & biblioteca = tem_leitores )  ) : ocioso;
			1: estado;
		esac;
		next(biblioteca) :=
			case
			(next(estado) = lendo): tem_leitores;
			1: biblioteca;
		esac;
	FAIRNESS
		running

MODULE main
	VAR
		biblioteca : {livre, tem_leitores, tem_escritor};
		escritor : process Escritor(biblioteca);
		escritor2 : process Escritor(biblioteca);

		leitor : process Leitor(biblioteca);
		leitor2 : process Leitor(biblioteca);

	ASSIGN
		init(biblioteca) := livre;

		next(escritor.estado) := 
			case
			(next(leitor.estado) = ocioso & next(leitor2.estado) = ocioso & next(escritor2.estado) = ocioso) : escrevendo;
			1:escritor.estado;
			esac;
		next(escritor2.estado) := 
			case
			(next(leitor.estado) = ocioso & next(leitor2.estado) = ocioso & next(escritor.estado) = ocioso) : escrevendo;
			1:escritor2.estado;
			esac;
		next(leitor.estado) := 
			case
			(next(escritor.estado) = ocioso & next(escritor2.estado) = ocioso) : lendo;
			1:leitor.estado;
			esac;
		next(leitor2.estado) := 
			case
			(next(escritor.estado) = ocioso & next(escritor2.estado) = ocioso) : lendo;
			1:leitor2.estado;
			esac;

		next(biblioteca):=
			case
			(next(escritor.estado = escrevendo | escritor2.estado = escrevendo)) : tem_escritor; 
			(next(leitor.estado = lendo | leitor2.estado = lendo)) : tem_leitores;
			(next(escritor.estado) = ocioso & next(escritor2.estado) = ocioso & next(leitor.estado) = ocioso & next(leitor2.estado) = ocioso): livre;
			1: biblioteca;
		esac;
	

SPEC
	AG!( (escritor.estado = escrevendo & leitor.estado = lendo) | (escritor.estado = escrevendo & leitor2.estado = lendo))
SPEC
	AG!( (escritor2.estado = escrevendo & leitor.estado = lendo) | (escritor2.estado = escrevendo & leitor2.estado = lendo))
SPEC 
	AF(escritor.estado=escrevendo)